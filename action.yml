name: "terraform-plan-storage"
description: "A GitHub Action securely store Terraform plan files in an S3 bucket with metadata storage in DynamoDB"
author: hello@cloudposse.com
branding:
  icon: "terminal"
  color: "blue"
inputs:
  action:
    required: true
    description: "which action to perform. Valid values are: 'storePlan', 'getPlan', 'taintPlan'"
    default: "storePlan"
  blobAccountName:
    description: "the name of the Azure Blob Storage account to store the plan file"
    required: false
  blobContainerName:
    description: "the name of the Azure Blob Storage container to store the plan file"
    required: false
  bucketName:
    description: "the name of the S3 or GCS bucket to store the plan file"
    required: false
    default: "terraform-plan-storage"
  commitSHA:
    description: "Commit SHA to use for fetching plan"
    required: false
    default: ""
  component:
    description: "the name of the component corresponding to the plan file"
    required: false
  cosmosConnectionString:
    description: "the connection string to the CosmosDB account to store the metadata"
    required: false
  cosmosContainerName:
    description: "the name of the CosmosDB container to store the metadata"
    required: false
  cosmosDatabaseName:
    description: "the name of the CosmosDB database to store the metadata"
    required: false
  cosmosEndpoint:
    description: "the endpoint of the CosmosDB account to store the metadata"
    required: false
  failOnMissingPlan:
    description: "Fail if plan is missing"
    required: false
    default: "true"
  metadataRepositoryType:
    description: "the type of repository where the plan file is stored. Valid values are: 'dynamo', 'cosmodb', 'firestore'"
    required: false
    default: "dynamo"
  planPath:
    description: "path to the Terraform plan file. Required for 'storePlan' and 'getPlan' actions"
  planRepositoryType:
    description: "the type of repository where the metadata is stored. Valid values are: 's3', 'azureblob', 'gcs'"
    required: false
    default: "s3"
  stack:
    description: "the name of the stack corresponding to the plan file"
    required: false
  tableName:
    description: "the name of the dynamodb table to store metadata"
    required: false
    default: "terraform-plan-storage"
  gcpCredentials:
    description: "the Google Cloud credentials for GCP services (GCS, Firestore)"
    required: false
  gcpProjectId:
    description: "the Google Cloud project ID for GCP services (GCS, Firestore)"
    required: false
  firestoreCollectionName:
    description: "the name of the Firestore collection to store the metadata"
    required: false
    default: "terraform-plan-storage"

outputs: {}
runs:
  using: "node20"
  main: "dist/index.js"
